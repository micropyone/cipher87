{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u53e4\u5178\u5bc6\u78bc","title":"Home"},{"location":"#_1","text":"","title":"\u53e4\u5178\u5bc6\u78bc"},{"location":"about/","text":"\u95dc\u65bc\u672c\u7ad9 \u4f5c\u8005\u7c21\u4ecb Bug \u8001\u5e2b \u8a2d\u8a08\u52d5\u6a5f \u6b64\u5c08\u984c\u662f\u8001\u5e2b\u88fd\u4f5c\uff0c\u63d0\u4f9b\u7d66\u4e2d\u7d1a\u73ed\u540c\u5b78\u4f5c\u70ba\u5c08\u984c\u8a2d\u8a08\u8207\u958b\u767c\u53c3\u8003\u3002\u671f\u5f85\u540c\u5b78\u5011\u7684\u4f5c\u54c1\u80fd\u5920\u505a\u5f97\u6bd4\u8001\u5e2b\u9084\u8981\u8c50\u5bcc \u96fb\u5f71\u63a8\u85a6 Interstellar (\u661f\u969b\u6548\u61c9) The Imitation Game (\u6a21\u4eff\u904a\u6232) The Martian (\u7d55\u5730\u6551\u63f4) Hidden Figures (\u95dc\u9375\u5c11\u6578)","title":"\u95dc\u65bc\u672c\u7ad9"},{"location":"about/#_1","text":"","title":"\u95dc\u65bc\u672c\u7ad9"},{"location":"about/#_2","text":"Bug \u8001\u5e2b","title":"\u4f5c\u8005\u7c21\u4ecb"},{"location":"about/#_3","text":"\u6b64\u5c08\u984c\u662f\u8001\u5e2b\u88fd\u4f5c\uff0c\u63d0\u4f9b\u7d66\u4e2d\u7d1a\u73ed\u540c\u5b78\u4f5c\u70ba\u5c08\u984c\u8a2d\u8a08\u8207\u958b\u767c\u53c3\u8003\u3002\u671f\u5f85\u540c\u5b78\u5011\u7684\u4f5c\u54c1\u80fd\u5920\u505a\u5f97\u6bd4\u8001\u5e2b\u9084\u8981\u8c50\u5bcc","title":"\u8a2d\u8a08\u52d5\u6a5f"},{"location":"about/#_4","text":"Interstellar (\u661f\u969b\u6548\u61c9) The Imitation Game (\u6a21\u4eff\u904a\u6232) The Martian (\u7d55\u5730\u6551\u63f4) Hidden Figures (\u95dc\u9375\u5c11\u6578)","title":"\u96fb\u5f71\u63a8\u85a6"},{"location":"ascii/","text":"ASCII \u7de8\u78bc \u53c3\u8003\u8cc7\u6e90 ASCII (American Standard Code for Information Interchange\uff0c\u7f8e\u570b\u8cc7\u8a0a\u4ea4\u63db\u6a19\u6e96\u4ee3\u78bc) \u662f\u57fa\u65bc\u62c9\u4e01\u5b57\u6bcd\u7684\u4e00\u5957\u96fb\u8166\u7de8\u78bc\u7cfb\u7d71\u3002\u5b83\u4e3b\u8981\u7528\u65bc\u986f\u793a\u73fe\u4ee3\u82f1\u8a9e\u3002 \u7dad\u57fa\u767e\u79d1 \u9032\u4f4d\u8f49\u63db 1 2 3 4 n = int ( input ( 'n: ' )) print ( f 'n \u7684 2 \u9032\u4f4d { bin ( n ) } ' ) print ( f 'n \u7684 8 \u9032\u4f4d { oct ( n ) } ' ) print ( f 'n \u7684 16 \u9032\u4f4d { hex ( n ) } ' ) ASCII \u53ef\u986f\u793a\u5b57\u5143 BIN HEX DEC CHAR 100000 20 32 100001 21 33 ! 100010 22 34 \" 100011 23 35 # 100100 24 36 $ 100101 25 37 % 100110 26 38 & 100111 27 39 ' 101000 28 40 ( 101001 29 41 ) 101010 2A 42 * 101011 2B 43 + 101100 2C 44 , 101101 2D 45 - 101110 2E 46 . 101111 2F 47 / 110000 30 48 0 110001 31 49 1 110010 32 50 2 110011 33 51 3 110100 34 52 4 110101 35 53 5 110110 36 54 6 110111 37 55 7 111000 38 56 8 111001 39 57 9 111010 3A 58 : 111011 3B 59 ; 111100 3C 60 < 111101 3D 61 = 111110 3E 62 > 111111 3F 63 ? 1000000 40 64 @ 1000001 41 65 A 1000010 42 66 B 1000011 43 67 C 1000100 44 68 D 1000101 45 69 E 1000110 46 70 F 1000111 47 71 G 1001000 48 72 H 1001001 49 73 I 1001010 4A 74 J 1001011 4B 75 K 1001100 4C 76 L 1001101 4D 77 M 1001110 4E 78 N 1001111 4F 79 O 1010000 50 80 P 1010001 51 81 Q 1010010 52 82 R 1010011 53 83 S 1010100 54 84 T 1010101 55 85 U 1010110 56 86 V 1010111 57 87 W 1011000 58 88 X 1011001 59 89 Y 1011010 5A 90 Z 1011011 5B 91 [ 1011100 5C 92 \\ 1011101 5D 93 ] 1011110 5E 94 ^ 1011111 5F 95 _ 1100000 60 96 ` 1100001 61 97 a 1100010 62 98 b 1100011 63 99 c 1100100 64 100 d 1100101 65 101 e 1100110 66 102 f 1100111 67 103 g 1101000 68 104 h 1101001 69 105 i 1101010 6A 106 j 1101011 6B 107 k 1101100 6C 108 l 1101101 6D 109 m 1101110 6E 110 n 1101111 6F 111 o 1110000 70 112 p 1110001 71 113 q 1110010 72 114 r 1110011 73 115 s 1110100 74 116 t 1110101 75 117 u 1110110 76 118 v 1110111 77 119 w 1111000 78 120 x 1111001 79 121 y 1111010 7A 122 z 1111011 7B 123 { 1111100 7C 124 1111101 7D 125 } 1111110 7E 126 ~ \u53ef\u986f\u793a\u5b57\u5143\u5efa\u8868\u7a0b\u5f0f 1 2 3 4 5 6 7 print ( f \"| { 'BIN' : ^9 } | { 'HEX' : ^5 } | { 'DEC' : ^5 } | { 'CHAR' : ^6 } |\" ) print ( f \"| { '-' * 9 : ^9 } | { '-' * 5 : ^5 } | { '-' * 5 : ^5 } | { '-' * 6 : ^6 } |\" ) for i in range ( 32 , 127 ): bb = bin ( i )[ 2 :] hh = hex ( i )[ 2 :] . upper () cc = chr ( i ) print ( f \"| { bb : ^9 } | { hh : ^5 } | { i : ^5 } | { cc : ^6 } |\" ) \u5927\u5c0f\u5beb\u5b57\u6bcd 1 2 3 4 5 6 7 8 9 10 11 # \u5b58\u53d6\u5927\u5beb\u5b57\u6bcd alist = [] # \u5b58\u53d6\u5c0f\u5beb\u5b57\u6bcd blist = [] for i in range ( 65 , 91 ): alist . append ( chr ( i )) # \u5c0f\u5beb\u7684 ASCII \u503c\u8207\u5927\u5beb\u76f8\u5dee 32 blist . append ( chr ( i + 32 )) # \u4f7f\u7528 str.join() \u65b9\u6cd5\u5408\u4f75\u5b57\u6bcd\u70ba\u4e00\u500b\u5b57\u4e32 print ( '' . join ( alist )) print ( '' . join ( blist )) \u67e5\u8a62\u5b57\u5143 ASCII \u503c 1 2 3 4 5 6 7 while True : astr = input ( '\u8f38\u5165\u4e00\u500b\u5b57\u4e32 (q \u8868\u793a\u96e2\u958b): ' ) if astr == 'q' : break for c in astr : print ( f ' { c } -> { ord ( c ) } ' ) print ( '-' * 10 )","title":"ASCII \u7de8\u78bc"},{"location":"ascii/#ascii","text":"","title":"ASCII \u7de8\u78bc"},{"location":"ascii/#_1","text":"ASCII (American Standard Code for Information Interchange\uff0c\u7f8e\u570b\u8cc7\u8a0a\u4ea4\u63db\u6a19\u6e96\u4ee3\u78bc) \u662f\u57fa\u65bc\u62c9\u4e01\u5b57\u6bcd\u7684\u4e00\u5957\u96fb\u8166\u7de8\u78bc\u7cfb\u7d71\u3002\u5b83\u4e3b\u8981\u7528\u65bc\u986f\u793a\u73fe\u4ee3\u82f1\u8a9e\u3002 \u7dad\u57fa\u767e\u79d1","title":"\u53c3\u8003\u8cc7\u6e90"},{"location":"ascii/#_2","text":"1 2 3 4 n = int ( input ( 'n: ' )) print ( f 'n \u7684 2 \u9032\u4f4d { bin ( n ) } ' ) print ( f 'n \u7684 8 \u9032\u4f4d { oct ( n ) } ' ) print ( f 'n \u7684 16 \u9032\u4f4d { hex ( n ) } ' )","title":"\u9032\u4f4d\u8f49\u63db"},{"location":"ascii/#ascii_1","text":"BIN HEX DEC CHAR 100000 20 32 100001 21 33 ! 100010 22 34 \" 100011 23 35 # 100100 24 36 $ 100101 25 37 % 100110 26 38 & 100111 27 39 ' 101000 28 40 ( 101001 29 41 ) 101010 2A 42 * 101011 2B 43 + 101100 2C 44 , 101101 2D 45 - 101110 2E 46 . 101111 2F 47 / 110000 30 48 0 110001 31 49 1 110010 32 50 2 110011 33 51 3 110100 34 52 4 110101 35 53 5 110110 36 54 6 110111 37 55 7 111000 38 56 8 111001 39 57 9 111010 3A 58 : 111011 3B 59 ; 111100 3C 60 < 111101 3D 61 = 111110 3E 62 > 111111 3F 63 ? 1000000 40 64 @ 1000001 41 65 A 1000010 42 66 B 1000011 43 67 C 1000100 44 68 D 1000101 45 69 E 1000110 46 70 F 1000111 47 71 G 1001000 48 72 H 1001001 49 73 I 1001010 4A 74 J 1001011 4B 75 K 1001100 4C 76 L 1001101 4D 77 M 1001110 4E 78 N 1001111 4F 79 O 1010000 50 80 P 1010001 51 81 Q 1010010 52 82 R 1010011 53 83 S 1010100 54 84 T 1010101 55 85 U 1010110 56 86 V 1010111 57 87 W 1011000 58 88 X 1011001 59 89 Y 1011010 5A 90 Z 1011011 5B 91 [ 1011100 5C 92 \\ 1011101 5D 93 ] 1011110 5E 94 ^ 1011111 5F 95 _ 1100000 60 96 ` 1100001 61 97 a 1100010 62 98 b 1100011 63 99 c 1100100 64 100 d 1100101 65 101 e 1100110 66 102 f 1100111 67 103 g 1101000 68 104 h 1101001 69 105 i 1101010 6A 106 j 1101011 6B 107 k 1101100 6C 108 l 1101101 6D 109 m 1101110 6E 110 n 1101111 6F 111 o 1110000 70 112 p 1110001 71 113 q 1110010 72 114 r 1110011 73 115 s 1110100 74 116 t 1110101 75 117 u 1110110 76 118 v 1110111 77 119 w 1111000 78 120 x 1111001 79 121 y 1111010 7A 122 z 1111011 7B 123 { 1111100 7C 124 1111101 7D 125 } 1111110 7E 126 ~","title":"ASCII \u53ef\u986f\u793a\u5b57\u5143"},{"location":"ascii/#_3","text":"1 2 3 4 5 6 7 print ( f \"| { 'BIN' : ^9 } | { 'HEX' : ^5 } | { 'DEC' : ^5 } | { 'CHAR' : ^6 } |\" ) print ( f \"| { '-' * 9 : ^9 } | { '-' * 5 : ^5 } | { '-' * 5 : ^5 } | { '-' * 6 : ^6 } |\" ) for i in range ( 32 , 127 ): bb = bin ( i )[ 2 :] hh = hex ( i )[ 2 :] . upper () cc = chr ( i ) print ( f \"| { bb : ^9 } | { hh : ^5 } | { i : ^5 } | { cc : ^6 } |\" )","title":"\u53ef\u986f\u793a\u5b57\u5143\u5efa\u8868\u7a0b\u5f0f"},{"location":"ascii/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 # \u5b58\u53d6\u5927\u5beb\u5b57\u6bcd alist = [] # \u5b58\u53d6\u5c0f\u5beb\u5b57\u6bcd blist = [] for i in range ( 65 , 91 ): alist . append ( chr ( i )) # \u5c0f\u5beb\u7684 ASCII \u503c\u8207\u5927\u5beb\u76f8\u5dee 32 blist . append ( chr ( i + 32 )) # \u4f7f\u7528 str.join() \u65b9\u6cd5\u5408\u4f75\u5b57\u6bcd\u70ba\u4e00\u500b\u5b57\u4e32 print ( '' . join ( alist )) print ( '' . join ( blist ))","title":"\u5927\u5c0f\u5beb\u5b57\u6bcd"},{"location":"ascii/#ascii_2","text":"1 2 3 4 5 6 7 while True : astr = input ( '\u8f38\u5165\u4e00\u500b\u5b57\u4e32 (q \u8868\u793a\u96e2\u958b): ' ) if astr == 'q' : break for c in astr : print ( f ' { c } -> { ord ( c ) } ' ) print ( '-' * 10 )","title":"\u67e5\u8a62\u5b57\u5143 ASCII \u503c"},{"location":"basic/","text":"Python \u57fa\u790e Python Python Online Compiler Python \u5b98\u65b9 Logo \u8f38\u51fa 1 2 3 4 5 6 # \u4f7f\u7528 print() \u51fd\u5f0f\uff0c\u53ef\u4ee5\u653e 2 \u500b\u4ee5\u4e0a\u53c3\u6578 print ( 'Hello!' ) print ( 123 ) print ( '123' + '456' ) print ( 123 + 456 ) print ( 123 , 456 , 789 ) \u8f38\u5165\u540d\u5b57\u8207\u8f38\u51fa 1 2 3 4 # \u57f7\u884c input() \u5f8c\uff0c\u7b49\u5f85\u63a5\u6536\u4f7f\u7528\u8005\u7684\u4e00\u500b\u8f38\u5165 # \u4efb\u4f55\u8f38\u5165\u5747\u70ba\u5b57\u4e32 name = input ( 'Name: ' ) print ( 'Hi' , name ) \u5169\u6578\u52a0\u6e1b\u4e58\u9664 1 2 3 4 5 6 7 8 9 10 # \u4efb\u4f55\u8f38\u5165\u5747\u70ba\u5b57\u4e32 # \u5fc5\u9808\u4ee5 int() \u8f49\u70ba\u6574\u6578\u624d\u53ef\u4ee5\u57f7\u884c\u7b97\u8853\u904b\u7b97 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) print ( f ' { a } + { b } = { a + b } ' ) print ( f ' { a } - { b } = { a - b } ' ) print ( f ' { a } * { b } = { a * b } ' ) print ( f ' { a } / { b } = { a / b } ' ) # \u8f38\u51fa\u683c\u5f0f\u8a2d\u5b9a :.2f \u8868\u793a\u4fdd\u7559\u81f3\u5c0f\u6578\u9ede\u5f8c 2 \u4f4d print ( f ' { a } / { b } = { a / b : .2f } ' ) \u5546\u6578\u8207\u9918\u6578 1 2 3 4 5 6 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) # \u5546\u6578 print ( f ' { a } // { b } = { a // b } ' ) # \u9918\u6578 print ( f ' { a } % { b } = { a % b } ' ) \u5947\u6578\u8207\u5076\u6578 1 2 3 4 5 6 7 8 n = int ( input ( 'n: ' )) # \u4efb\u4f55\u6574\u6578\u9664\u4ee5 2 \u7684\u9918\u6578\uff0c\u4e0d\u662f 0 \u5c31\u662f 1 # \u9918\u6578\u70ba 0 \u8868\u793a n \u53ef\u88ab 2 \u6574\u9664\uff0c\u5373 n \u662f\u5076\u6578 # \u9918\u6578\u70ba 1 \u8868\u793a n \u662f\u5947\u6578 if n % 2 == 1 : print ( n , '\u662f\u5947\u6578' ) elif n % 2 == 0 : print ( n , '\u662f\u5076\u6578' ) \u56e0\u6578\u5224\u65b7 1 2 3 4 5 6 7 8 9 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) # \u5224\u65b7\u4e00\u500b\u6578\u662f\u5426\u70ba\u53e6\u4e00\u500b\u6578\u7684\u56e0\u6578\uff0c\u61c9\u8a72\u7528\u9918\u6578 % \u904b\u7b97 if a % b == 0 : print ( f ' { b } \u662f { a } \u7684\u56e0\u6578' ) elif b % a == 0 : print ( f ' { a } \u662f { b } \u7684\u56e0\u6578' ) else : print ( f ' { a } \u548c { b } \u6c92\u6709\u56e0\u6578\u95dc\u4fc2' ) \u500d\u6578\u5224\u65b7 1 2 3 4 5 6 7 8 9 10 11 12 # \u4f7f\u7528 for \u8ff4\u5708 # \u8f38\u51fa a ~ b \u4e4b\u9593\u7684\u6574\u6578 # \u5224\u65b7\u54ea\u4e9b\u6578\u662f n \u7684\u500d\u6578 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) n = int ( input ( 'n: ' )) for i in range ( a , b + 1 ): if i % n == 0 : print ( f ' { i } \u662f { n } \u7684 { i // n } \u500d\u6578' ) else : print ( i ) \u6307\u6578\u8207 2 \u7684\u6b21\u65b9 1 2 3 n = int ( input ( 'n: ' )) for i in range ( n + 1 ): print ( f '2 \u7684 { i } \u6b21\u65b9 = { 2 ** i } ' ) 26 \u500b\u5b57\u6bcd 1 2 3 4 5 6 7 8 9 alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' # \u4f7f\u7528 len() \u8a08\u7b97\u5b57\u4e32\u4e2d\u5b57\u6bcd\u500b\u6578\uff0c\u4e26\u5b58\u5230\u8b8a\u6578 n n = len ( alpha ) for i in range ( n ): # \u4f7f\u7528\u7d22\u5f15\u6280\u5de7 (indexing) \u53d6\u51fa\u500b\u5225\u5b57\u6bcd\u4e26\u9010\u5217\u8f38\u51fa # index \u5f9e 0 \u958b\u59cb\uff0c\u56e0\u6b64 26 \u500b\u5b57\u6bcd\u7684 index \u662f\u5f9e 0 ~ 25 # \u4f7f\u7528 str.lower() \u65b9\u6cd5\u8f49\u63db\u4e26\u8f38\u51fa\u5c0f\u5beb print ( i , alpha [ i ], alpha [ i ] . lower ()) \u7d42\u6975\u5bc6\u78bc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import random # \u5f9e 0 ~ 9999 \u96a8\u6a5f(\u4e82\u6578) \u6311\u9078\u4e00\u500b\u6574\u6578 answer = random . randrange ( 10000 ) print ( '\u7b54\u6848:' , answer ) # \u7121\u689d\u4ef6\u9032\u5165 while \u8ff4\u5708 while True : guess = int ( input ( '\u8acb\u5f9e 0 ~ 9999 \u4e2d\u731c\u4e00\u500b\u6574\u6578 (-1 \u8868\u793a\u653e\u68c4): ' )) if guess == - 1 : # break \u8868\u793a\u7acb\u5373\u96e2\u958b\u8ff4\u5708 print ( '\u5c1a\u672a\u7b54\u5c0d\u5c31\u653e\u68c4!' ) break elif guess == answer : print ( '\u606d\u559c\u7b54\u5c0d!' ) break elif guess > answer : print ( '\u6bd4\u7b54\u6848\u5927!' ) elif guess < answer : print ( '\u6bd4\u7b54\u6848\u5c0f!' )","title":"Python \u57fa\u790e"},{"location":"basic/#python","text":"Python Python Online Compiler","title":"Python \u57fa\u790e"},{"location":"basic/#python-logo","text":"","title":"Python \u5b98\u65b9 Logo"},{"location":"basic/#_1","text":"1 2 3 4 5 6 # \u4f7f\u7528 print() \u51fd\u5f0f\uff0c\u53ef\u4ee5\u653e 2 \u500b\u4ee5\u4e0a\u53c3\u6578 print ( 'Hello!' ) print ( 123 ) print ( '123' + '456' ) print ( 123 + 456 ) print ( 123 , 456 , 789 )","title":"\u8f38\u51fa"},{"location":"basic/#_2","text":"1 2 3 4 # \u57f7\u884c input() \u5f8c\uff0c\u7b49\u5f85\u63a5\u6536\u4f7f\u7528\u8005\u7684\u4e00\u500b\u8f38\u5165 # \u4efb\u4f55\u8f38\u5165\u5747\u70ba\u5b57\u4e32 name = input ( 'Name: ' ) print ( 'Hi' , name )","title":"\u8f38\u5165\u540d\u5b57\u8207\u8f38\u51fa"},{"location":"basic/#_3","text":"1 2 3 4 5 6 7 8 9 10 # \u4efb\u4f55\u8f38\u5165\u5747\u70ba\u5b57\u4e32 # \u5fc5\u9808\u4ee5 int() \u8f49\u70ba\u6574\u6578\u624d\u53ef\u4ee5\u57f7\u884c\u7b97\u8853\u904b\u7b97 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) print ( f ' { a } + { b } = { a + b } ' ) print ( f ' { a } - { b } = { a - b } ' ) print ( f ' { a } * { b } = { a * b } ' ) print ( f ' { a } / { b } = { a / b } ' ) # \u8f38\u51fa\u683c\u5f0f\u8a2d\u5b9a :.2f \u8868\u793a\u4fdd\u7559\u81f3\u5c0f\u6578\u9ede\u5f8c 2 \u4f4d print ( f ' { a } / { b } = { a / b : .2f } ' )","title":"\u5169\u6578\u52a0\u6e1b\u4e58\u9664"},{"location":"basic/#_4","text":"1 2 3 4 5 6 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) # \u5546\u6578 print ( f ' { a } // { b } = { a // b } ' ) # \u9918\u6578 print ( f ' { a } % { b } = { a % b } ' )","title":"\u5546\u6578\u8207\u9918\u6578"},{"location":"basic/#_5","text":"1 2 3 4 5 6 7 8 n = int ( input ( 'n: ' )) # \u4efb\u4f55\u6574\u6578\u9664\u4ee5 2 \u7684\u9918\u6578\uff0c\u4e0d\u662f 0 \u5c31\u662f 1 # \u9918\u6578\u70ba 0 \u8868\u793a n \u53ef\u88ab 2 \u6574\u9664\uff0c\u5373 n \u662f\u5076\u6578 # \u9918\u6578\u70ba 1 \u8868\u793a n \u662f\u5947\u6578 if n % 2 == 1 : print ( n , '\u662f\u5947\u6578' ) elif n % 2 == 0 : print ( n , '\u662f\u5076\u6578' )","title":"\u5947\u6578\u8207\u5076\u6578"},{"location":"basic/#_6","text":"1 2 3 4 5 6 7 8 9 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) # \u5224\u65b7\u4e00\u500b\u6578\u662f\u5426\u70ba\u53e6\u4e00\u500b\u6578\u7684\u56e0\u6578\uff0c\u61c9\u8a72\u7528\u9918\u6578 % \u904b\u7b97 if a % b == 0 : print ( f ' { b } \u662f { a } \u7684\u56e0\u6578' ) elif b % a == 0 : print ( f ' { a } \u662f { b } \u7684\u56e0\u6578' ) else : print ( f ' { a } \u548c { b } \u6c92\u6709\u56e0\u6578\u95dc\u4fc2' )","title":"\u56e0\u6578\u5224\u65b7"},{"location":"basic/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 # \u4f7f\u7528 for \u8ff4\u5708 # \u8f38\u51fa a ~ b \u4e4b\u9593\u7684\u6574\u6578 # \u5224\u65b7\u54ea\u4e9b\u6578\u662f n \u7684\u500d\u6578 a = int ( input ( 'a: ' )) b = int ( input ( 'b: ' )) n = int ( input ( 'n: ' )) for i in range ( a , b + 1 ): if i % n == 0 : print ( f ' { i } \u662f { n } \u7684 { i // n } \u500d\u6578' ) else : print ( i )","title":"\u500d\u6578\u5224\u65b7"},{"location":"basic/#2","text":"1 2 3 n = int ( input ( 'n: ' )) for i in range ( n + 1 ): print ( f '2 \u7684 { i } \u6b21\u65b9 = { 2 ** i } ' )","title":"\u6307\u6578\u8207 2 \u7684\u6b21\u65b9"},{"location":"basic/#26","text":"1 2 3 4 5 6 7 8 9 alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' # \u4f7f\u7528 len() \u8a08\u7b97\u5b57\u4e32\u4e2d\u5b57\u6bcd\u500b\u6578\uff0c\u4e26\u5b58\u5230\u8b8a\u6578 n n = len ( alpha ) for i in range ( n ): # \u4f7f\u7528\u7d22\u5f15\u6280\u5de7 (indexing) \u53d6\u51fa\u500b\u5225\u5b57\u6bcd\u4e26\u9010\u5217\u8f38\u51fa # index \u5f9e 0 \u958b\u59cb\uff0c\u56e0\u6b64 26 \u500b\u5b57\u6bcd\u7684 index \u662f\u5f9e 0 ~ 25 # \u4f7f\u7528 str.lower() \u65b9\u6cd5\u8f49\u63db\u4e26\u8f38\u51fa\u5c0f\u5beb print ( i , alpha [ i ], alpha [ i ] . lower ())","title":"26 \u500b\u5b57\u6bcd"},{"location":"basic/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import random # \u5f9e 0 ~ 9999 \u96a8\u6a5f(\u4e82\u6578) \u6311\u9078\u4e00\u500b\u6574\u6578 answer = random . randrange ( 10000 ) print ( '\u7b54\u6848:' , answer ) # \u7121\u689d\u4ef6\u9032\u5165 while \u8ff4\u5708 while True : guess = int ( input ( '\u8acb\u5f9e 0 ~ 9999 \u4e2d\u731c\u4e00\u500b\u6574\u6578 (-1 \u8868\u793a\u653e\u68c4): ' )) if guess == - 1 : # break \u8868\u793a\u7acb\u5373\u96e2\u958b\u8ff4\u5708 print ( '\u5c1a\u672a\u7b54\u5c0d\u5c31\u653e\u68c4!' ) break elif guess == answer : print ( '\u606d\u559c\u7b54\u5c0d!' ) break elif guess > answer : print ( '\u6bd4\u7b54\u6848\u5927!' ) elif guess < answer : print ( '\u6bd4\u7b54\u6848\u5c0f!' )","title":"\u7d42\u6975\u5bc6\u78bc"},{"location":"caesar/","text":"Caesar Cipher (\u51f1\u6492\u5bc6\u78bc) \u53c3\u8003\u8cc7\u6e90 \u51f1\u6492\u5bc6\u78bc\u662f\u4e00\u7a2e\u66ff\u63db\u52a0\u5bc6\u6280\u8853\uff0c\u660e\u6587\u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e0a\u5411\u5f8c\uff08\u6216\u5411\u524d\uff09\u6309\u7167\u4e00\u500b\u56fa\u5b9a\u6578\u76ee\u9032\u884c\u504f\u79fb\u5f8c\u88ab\u66ff\u63db\u6210\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u7576\u504f\u79fb\u91cf\u662f 3 \u7684\u6642\u5019\uff0c\u6240\u6709\u7684\u5b57\u6bcd A \u5c07\u88ab\u66ff\u63db\u6210 D \uff0c B \u8b8a\u6210 E \uff0c\u4ee5\u6b64\u985e\u63a8\u3002\u9019\u500b\u52a0\u5bc6\u65b9\u6cd5\u662f\u4ee5\u7f85\u99ac\u5171\u548c\u6642\u671f\u51f1\u6492\u7684\u540d\u5b57\u547d\u540d\u7684\uff0c\u64da\u7a31\u7576\u5e74\u51f1\u6492\u66fe\u7528\u6b64\u65b9\u6cd5\u8207\u5176\u5c07\u8ecd\u5011\u9032\u884c\u806f\u7e6b\u3002 \u7dad\u57fa\u767e\u79d1 \u52a0\u5bc6\u4e00\u500b\u5b57\u4e32 1 2 3 4 5 6 7 8 9 10 11 # \u53ef\u7528\u65bc\u89e3\u5bc6 while True : astr = input ( '\u8f38\u5165\u4e00\u500b\u660e\u6587\u5b57\u4e32 (q \u8868\u793a\u96e2\u958b): ' ) if astr == 'q' : break akey = int ( input ( '\u504f\u79fb\u91cf: ' )) alist = [] for c in astr : alist . append ( chr ( ord ( c ) + akey )) print ( '\u5bc6\u6587:' , '' . join ( alist )) print () \u504f\u79fb\u91cf\u63db\u7b97\u5c0d\u7167\u8868 1 2 3 4 5 6 7 8 9 10 alpha = [ chr ( i ) for i in range ( 65 , 91 )] print ( f \"|##| { '|' . join ( alpha ) } |\" ) print ( f \"|--| { '-|' * 26 } \" ) for k in range ( 26 ): alist = [] for i in range ( 26 ): nidx = ( i + k ) % 26 newc = alpha [ nidx ] alist . append ( newc ) print ( f \"| { k : 2 } | { '|' . join ( alist ) } |\" )","title":"\u51f1\u6492\u5bc6\u78bc"},{"location":"caesar/#caesar-cipher","text":"","title":"Caesar Cipher (\u51f1\u6492\u5bc6\u78bc)"},{"location":"caesar/#_1","text":"\u51f1\u6492\u5bc6\u78bc\u662f\u4e00\u7a2e\u66ff\u63db\u52a0\u5bc6\u6280\u8853\uff0c\u660e\u6587\u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u90fd\u5728\u5b57\u6bcd\u8868\u4e0a\u5411\u5f8c\uff08\u6216\u5411\u524d\uff09\u6309\u7167\u4e00\u500b\u56fa\u5b9a\u6578\u76ee\u9032\u884c\u504f\u79fb\u5f8c\u88ab\u66ff\u63db\u6210\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u7576\u504f\u79fb\u91cf\u662f 3 \u7684\u6642\u5019\uff0c\u6240\u6709\u7684\u5b57\u6bcd A \u5c07\u88ab\u66ff\u63db\u6210 D \uff0c B \u8b8a\u6210 E \uff0c\u4ee5\u6b64\u985e\u63a8\u3002\u9019\u500b\u52a0\u5bc6\u65b9\u6cd5\u662f\u4ee5\u7f85\u99ac\u5171\u548c\u6642\u671f\u51f1\u6492\u7684\u540d\u5b57\u547d\u540d\u7684\uff0c\u64da\u7a31\u7576\u5e74\u51f1\u6492\u66fe\u7528\u6b64\u65b9\u6cd5\u8207\u5176\u5c07\u8ecd\u5011\u9032\u884c\u806f\u7e6b\u3002 \u7dad\u57fa\u767e\u79d1","title":"\u53c3\u8003\u8cc7\u6e90"},{"location":"caesar/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 # \u53ef\u7528\u65bc\u89e3\u5bc6 while True : astr = input ( '\u8f38\u5165\u4e00\u500b\u660e\u6587\u5b57\u4e32 (q \u8868\u793a\u96e2\u958b): ' ) if astr == 'q' : break akey = int ( input ( '\u504f\u79fb\u91cf: ' )) alist = [] for c in astr : alist . append ( chr ( ord ( c ) + akey )) print ( '\u5bc6\u6587:' , '' . join ( alist )) print ()","title":"\u52a0\u5bc6\u4e00\u500b\u5b57\u4e32"},{"location":"caesar/#_3","text":"1 2 3 4 5 6 7 8 9 10 alpha = [ chr ( i ) for i in range ( 65 , 91 )] print ( f \"|##| { '|' . join ( alpha ) } |\" ) print ( f \"|--| { '-|' * 26 } \" ) for k in range ( 26 ): alist = [] for i in range ( 26 ): nidx = ( i + k ) % 26 newc = alpha [ nidx ] alist . append ( newc ) print ( f \"| { k : 2 } | { '|' . join ( alist ) } |\" )","title":"\u504f\u79fb\u91cf\u63db\u7b97\u5c0d\u7167\u8868"},{"location":"mkdocs/","text":"MkDocs MkDocs Material for MkDocs: mkdocs-material highlight.js \u5b89\u88dd MkDocs pip install mkdocs pip install mkdocs-material \u64cd\u4f5c\u6307\u4ee4 mkdocs new [dir-name] - \u65b0\u5efa\u5c08\u6848 mkdocs serve - \u555f\u52d5\u7db2\u7ad9\u4f3a\u670d\u5668\u3002\u6587\u4ef6\u8b8a\u66f4\u5f8c\u5373\u6642\u91cd\u6574\u66f4\u65b0\u9801\u9762 mkdocs build - \u5efa\u7acb\u975c\u614b\u6587\u4ef6\u7db2\u7ad9\u3002\u53ef\u4ee5\u90e8\u7f72\u81f3 GitHub mkdocs -h - \u6307\u4ee4\u8aaa\u660e \u5c08\u6848\u8a2d\u5b9a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 site_name: \u53e4\u5178\u5bc6\u78bc nav: - Home: index.md - MkDocs: mkdocs.md - Python: python.md - About: about.md theme: name: material palette: - scheme: default primary: pink accent: pink markdown_extensions: - attr_list - pymdownx.highlight: linenums: true - pymdownx.superfences extra_javascript: - js/highlight.min.js - js/config.js extra_css: - css/vs.min.css - css/main.css config.js 1 hljs.initHighlighting() main.css 1 2 3 4 5 6 7 8 9 10 11 h1 { color: #4051b5 !important; } h2 { color: #288b0e !important; } h3 { color: #2085a6 !important; }","title":"MkDocs"},{"location":"mkdocs/#mkdocs","text":"MkDocs Material for MkDocs: mkdocs-material highlight.js","title":"MkDocs"},{"location":"mkdocs/#mkdocs_1","text":"pip install mkdocs pip install mkdocs-material","title":"\u5b89\u88dd MkDocs"},{"location":"mkdocs/#_1","text":"mkdocs new [dir-name] - \u65b0\u5efa\u5c08\u6848 mkdocs serve - \u555f\u52d5\u7db2\u7ad9\u4f3a\u670d\u5668\u3002\u6587\u4ef6\u8b8a\u66f4\u5f8c\u5373\u6642\u91cd\u6574\u66f4\u65b0\u9801\u9762 mkdocs build - \u5efa\u7acb\u975c\u614b\u6587\u4ef6\u7db2\u7ad9\u3002\u53ef\u4ee5\u90e8\u7f72\u81f3 GitHub mkdocs -h - \u6307\u4ee4\u8aaa\u660e","title":"\u64cd\u4f5c\u6307\u4ee4"},{"location":"mkdocs/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 site_name: \u53e4\u5178\u5bc6\u78bc nav: - Home: index.md - MkDocs: mkdocs.md - Python: python.md - About: about.md theme: name: material palette: - scheme: default primary: pink accent: pink markdown_extensions: - attr_list - pymdownx.highlight: linenums: true - pymdownx.superfences extra_javascript: - js/highlight.min.js - js/config.js extra_css: - css/vs.min.css - css/main.css","title":"\u5c08\u6848\u8a2d\u5b9a"},{"location":"mkdocs/#configjs","text":"1 hljs.initHighlighting()","title":"config.js"},{"location":"mkdocs/#maincss","text":"1 2 3 4 5 6 7 8 9 10 11 h1 { color: #4051b5 !important; } h2 { color: #288b0e !important; } h3 { color: #2085a6 !important; }","title":"main.css"},{"location":"vigenere/","text":"Vigen\u00e8re Cipher (\u7dad\u5409\u5c3c\u4e9e\u5bc6\u78bc) \u53c3\u8003\u8cc7\u6e90 \u7dad\u5409\u5c3c\u4e9e\u5bc6\u78bc\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51f1\u6492\u5bc6\u78bc\u7d44\u6210\u5bc6\u78bc\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c6c\u65bc\u591a\u8868\u5bc6\u78bc\u7684\u4e00\u7a2e\u7c21\u55ae\u5f62\u5f0f\u3002\u7dad\u5409\u5c3c\u4e9e\u5bc6\u78bc\u4ee5\u5176\u7c21\u55ae\u6613\u7528\u800c\u8457\u7a31\uff0c\u540c\u6642\u521d\u5b78\u8005\u901a\u5e38\u96e3\u4ee5\u7834\u89e3\uff0c\u56e0\u800c\u53c8\u88ab\u7a31\u70ba\u300c\u4e0d\u53ef\u7834\u8b6f\u7684\u5bc6\u78bc\u300d\u3002 \u7dad\u57fa\u767e\u79d1 \u7f85\u5bc6\u6b50\u8207\u8331\u9e97\u8449 \u8acb\u5c07\u672c\u5c01\u60c5\u66f8\u5b58\u65bc letter.txt O\u2019 Romeo, my dearest dearest Romeo! It pains me so to write this, and the very thought of you not being beside me is a stab to my heart. I urge my tears not to fall as I pen this \u2013 for you are alive, and not dead, and I must rejoice in this. It pains me so, then we are only just wed, yet we must be separated. I can still feel your light kiss lingering above my brow, when you bid me farewell. But my sweet sweet husband, my love, we will meet again, for I simply cannot bear even a minute without you at my side. I have sworn to love you and only you, and I\u2019ll do anything just to spend the rest of my life with you. I don\u2019t ask for forever, because forever is too far away, but I ask for a few more decades with you. I don\u2019t ask to be born on the same day, same month, same year as you, because it is impossible, but I ask to die on the same day, same month, same year as you, so we will never ever be away from each other anymore. Our souls are intertwined, and being apart makes me devastated. I have consulted our dearest father, Friar Lawrence, and he has a plan that will allow me to join you once again, in body and soul. But I am so afraid, what if the plan fails? I am not afraid of death, but I\u2019m afraid of your death. Even if I cannot be with you, it hurts me to imagine you lying on a cold, hard slab of stone, colourless. No matter what my love, you must promise me that you will live on well. As you read this I believe the plan is already in action. Pray Romeo, pray that it will succeed. Pray that it will succeed, then I\u2019ll can look into your eyes again. Pray that it will succeed, so we will never part again. Pray that it will succeed, because then I can love you again. I cannot feel your soft lips upon mine through paper, but I pour my infinite love in this words, and it will be good enough for now, knowing that your beautiful fingers have stroked and caressed these words. Farewell my dear, and it is my biggest hope that it will not be for long. To be hopelessly yours: this is my fate. Juliet \u6a94\u6848\u52a0\u89e3\u5bc6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 filename = input ( '\u8acb\u8f38\u5165\u8981\u52a0\u5bc6\u7684\u6a94\u540d: ' ) if filename == '' : filename = 'letter.txt' # \u8b80\u6a94 fho = open ( filename , 'r' , encoding = 'utf-8' ) content = fho . read () fho . close () # \u52a0\u5bc6\u8655\u7406 alist = [] password = input ( '\u8acb\u8f38\u5165\u5bc6\u78bc: ' ) plen = len ( password ) for i , c in enumerate ( content ): ki = i % plen newc = chr ( ord ( c ) + ord ( password [ ki ])) alist . append ( newc ) cipher = '' . join ( alist ) # \u5b58\u6a94 output_file = 'encrypted.txt' fho = open ( output_file , 'w' , encoding = 'utf-8' ) fho . write ( cipher ) fho . close () print ( '\u52a0\u5bc6\u5b8c\u7562! \u5bc6\u6587\u6a94\u540d:' , output_file )","title":"\u7dad\u5409\u5c3c\u4e9e\u5bc6\u78bc"},{"location":"vigenere/#vigenere-cipher","text":"","title":"Vigen\u00e8re Cipher (\u7dad\u5409\u5c3c\u4e9e\u5bc6\u78bc)"},{"location":"vigenere/#_1","text":"\u7dad\u5409\u5c3c\u4e9e\u5bc6\u78bc\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51f1\u6492\u5bc6\u78bc\u7d44\u6210\u5bc6\u78bc\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c6c\u65bc\u591a\u8868\u5bc6\u78bc\u7684\u4e00\u7a2e\u7c21\u55ae\u5f62\u5f0f\u3002\u7dad\u5409\u5c3c\u4e9e\u5bc6\u78bc\u4ee5\u5176\u7c21\u55ae\u6613\u7528\u800c\u8457\u7a31\uff0c\u540c\u6642\u521d\u5b78\u8005\u901a\u5e38\u96e3\u4ee5\u7834\u89e3\uff0c\u56e0\u800c\u53c8\u88ab\u7a31\u70ba\u300c\u4e0d\u53ef\u7834\u8b6f\u7684\u5bc6\u78bc\u300d\u3002 \u7dad\u57fa\u767e\u79d1","title":"\u53c3\u8003\u8cc7\u6e90"},{"location":"vigenere/#_2","text":"\u8acb\u5c07\u672c\u5c01\u60c5\u66f8\u5b58\u65bc letter.txt O\u2019 Romeo, my dearest dearest Romeo! It pains me so to write this, and the very thought of you not being beside me is a stab to my heart. I urge my tears not to fall as I pen this \u2013 for you are alive, and not dead, and I must rejoice in this. It pains me so, then we are only just wed, yet we must be separated. I can still feel your light kiss lingering above my brow, when you bid me farewell. But my sweet sweet husband, my love, we will meet again, for I simply cannot bear even a minute without you at my side. I have sworn to love you and only you, and I\u2019ll do anything just to spend the rest of my life with you. I don\u2019t ask for forever, because forever is too far away, but I ask for a few more decades with you. I don\u2019t ask to be born on the same day, same month, same year as you, because it is impossible, but I ask to die on the same day, same month, same year as you, so we will never ever be away from each other anymore. Our souls are intertwined, and being apart makes me devastated. I have consulted our dearest father, Friar Lawrence, and he has a plan that will allow me to join you once again, in body and soul. But I am so afraid, what if the plan fails? I am not afraid of death, but I\u2019m afraid of your death. Even if I cannot be with you, it hurts me to imagine you lying on a cold, hard slab of stone, colourless. No matter what my love, you must promise me that you will live on well. As you read this I believe the plan is already in action. Pray Romeo, pray that it will succeed. Pray that it will succeed, then I\u2019ll can look into your eyes again. Pray that it will succeed, so we will never part again. Pray that it will succeed, because then I can love you again. I cannot feel your soft lips upon mine through paper, but I pour my infinite love in this words, and it will be good enough for now, knowing that your beautiful fingers have stroked and caressed these words. Farewell my dear, and it is my biggest hope that it will not be for long. To be hopelessly yours: this is my fate. Juliet","title":"\u7f85\u5bc6\u6b50\u8207\u8331\u9e97\u8449"},{"location":"vigenere/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 filename = input ( '\u8acb\u8f38\u5165\u8981\u52a0\u5bc6\u7684\u6a94\u540d: ' ) if filename == '' : filename = 'letter.txt' # \u8b80\u6a94 fho = open ( filename , 'r' , encoding = 'utf-8' ) content = fho . read () fho . close () # \u52a0\u5bc6\u8655\u7406 alist = [] password = input ( '\u8acb\u8f38\u5165\u5bc6\u78bc: ' ) plen = len ( password ) for i , c in enumerate ( content ): ki = i % plen newc = chr ( ord ( c ) + ord ( password [ ki ])) alist . append ( newc ) cipher = '' . join ( alist ) # \u5b58\u6a94 output_file = 'encrypted.txt' fho = open ( output_file , 'w' , encoding = 'utf-8' ) fho . write ( cipher ) fho . close () print ( '\u52a0\u5bc6\u5b8c\u7562! \u5bc6\u6587\u6a94\u540d:' , output_file )","title":"\u6a94\u6848\u52a0\u89e3\u5bc6"}]}